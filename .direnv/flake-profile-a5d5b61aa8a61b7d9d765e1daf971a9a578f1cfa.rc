unset shellHook
nix_saved_PATH="$PATH"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/iffl6dlplhv22i2xy7n1w51a5r631kmi-bash-5.1-p16/bin/bash'
CC='gcc'
export CC
CONFIG_SHELL='/nix/store/iffl6dlplhv22i2xy7n1w51a5r631kmi-bash-5.1-p16/bin/bash'
export CONFIG_SHELL
CXX='g++'
export CXX
EPOCHREALTIME='1660037163.734345'
EPOCHSECONDS='1660037163'
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/4bwp189vbs0wzxygk4rgay56jlhn1bd2-cachix-0.8.1/bin:/nix/store/zr34apqipn3pp6k6m6b1ifwhhmrp08im-postgresql-14.4/bin:/nix/store/x836b8grlahay8rljgrfcqqiyj02hm4j-ghc-9.2.2/bin:/nix/store/jb6caagsqz5rr3l037hd537hl15qj7xi-cabal-install-3.6.2.0/bin:/nix/store/fazlw44alji2x0icmjic7n61mv4ihmxh-implicit-hie-0.1.2.7/bin:/nix/store/4r6dvlaknnwf4f2y3k4ynlclg3ag2pba-fourmolu-0.6.0.0/bin:/nix/store/kqbypv2jd90f08hrzqhgqwmps9x2ss86-haskell-language-server-1.7.0.0/bin:/nix/store/pff644yw6lcm2cvqrn2k8z8jz8f5vwph-aeson-pretty-0.8.9/bin:/nix/store/c1xw24435722whrbg64hjfnam2fswnva-ghcide-1.7.0.0/bin:/nix/store/kcj90y2mxjqisl5jzfd8zxw8nf2y5527-constraints-extras-0.3.2.1/bin:/nix/store/cxrx9w34xlz5gyw4z4y7r3d7yg03b8jb-hie-bios-0.9.1/bin:/nix/store/yxryjxli7pcarbnirv9psl01nc8pkhk9-hiedb-0.4.1.0/bin:/nix/store/1wl0wxpjm1sdf5x3zpjc4zrx7pvwbbfg-retrie-1.2.0.1/bin:/nix/store/8h1sbx544ks7lp3d3bywmhhdh7rv018c-shake-0.19.6/bin:/nix/store/zjb06k4zrlpdjn6vb6xm7jn3gijabcaw-floskell-0.10.6/bin:/nix/store/wrwdq93638dfb2byks2y0giy1svzyp2m-ormolu-0.5.0.0/bin:/nix/store/a020hp882w0blbc4hfqf277jfz7vxfbz-cabal2nix-2.18.0/bin:/nix/store/g36xayzhsnlybfc6pb31z8klsb486v7a-hpack-0.34.7/bin:/nix/store/gslcxcjlgx326qg3fzyh5qabzvjmilkj-cabal-fmt-0.1.6/bin:/nix/store/7jr7pr4c6yb85xpzay5xafs5zlcadkhz-coreutils-9.0/bin:/nix/store/140f6s4nwiawrr3xyxarmcv2mk62m62y-findutils-4.9.0/bin:/nix/store/35swvg68q1j3m9fbhcdnqwk9mlm8plvn-diffutils-3.8/bin:/nix/store/lgvd2fh4cndlv8mnyy49jp1nplpml3xp-gnused-4.8/bin:/nix/store/qd9jxc0q00cr7fp30y6jbbww20gj33lg-gnugrep-3.7/bin:/nix/store/w3p77mkdy3pigg12iyha8y9dqakhjsxn-gawk-5.1.1/bin:/nix/store/jm7czg4lgfhiphkyjwn1k1i8liqqizgi-gnutar-1.34/bin:/nix/store/vqpkbr3isafl4867app44w636zrkr9wp-gzip-1.12/bin:/nix/store/fkwcqfw3gcspmpmxqxqnxjja74sg207g-bzip2-1.0.6.0.2-bin/bin:/nix/store/4gkcrzpn31sb12fnzclyfzhpd8xh8l6x-gnumake-4.3/bin:/nix/store/iffl6dlplhv22i2xy7n1w51a5r631kmi-bash-5.1-p16/bin:/nix/store/c0hmdlwdd85gzmilafg4gzzdb2vpg176-patch-2.7.6/bin:/nix/store/kyg5qxx0nl5hfjx0kgw120b85i4l6i8y-xz-5.2.5-bin/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LD='ld'
export LD
LINENO='73'
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BINTOOLS='/nix/store/wp7kc5y840ldi5sd8j81fj4dabccff2d-binutils-wrapper-2.38'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_BUILD_CORES='12'
export NIX_BUILD_CORES
NIX_CC='/nix/store/ag2bpk0lzjvj409znklrz5krkpc5imzs-gcc-wrapper-11.3.0'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_CFLAGS_COMPILE=' -frandom-seed=7blwxsm3n1 -isystem /nix/store/zr34apqipn3pp6k6m6b1ifwhhmrp08im-postgresql-14.4/include -isystem /nix/store/zr34apqipn3pp6k6m6b1ifwhhmrp08im-postgresql-14.4/include'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='fortify stackprotector pic strictoverflow format relro bindnow'
export NIX_HARDENING_ENABLE
NIX_INDENT_MAKE='1'
export NIX_INDENT_MAKE
NIX_LDFLAGS='-rpath /home/gareth/code/classy-postgresql/outputs/out/lib64 -rpath /home/gareth/code/classy-postgresql/outputs/out/lib  -L/nix/store/zr34apqipn3pp6k6m6b1ifwhhmrp08im-postgresql-14.4/lib -L/nix/store/aqzd72fb59ssappmmkcajqakq3qa4s8z-postgresql-14.4-lib/lib -L/nix/store/8636r3d8rsk7c3l5xcgb1mn37pkfc84k-ncurses-6.3-p20220507/lib -L/nix/store/v3j1blvixih1gd29l8j1mxaf3v26cn2w-libffi-3.4.2/lib -L/nix/store/kxxxzpxww678wwbx78cq5in7gmdnmybq-gmp-with-cxx-6.2.1/lib -L/nix/store/zr34apqipn3pp6k6m6b1ifwhhmrp08im-postgresql-14.4/lib -L/nix/store/aqzd72fb59ssappmmkcajqakq3qa4s8z-postgresql-14.4-lib/lib -L/nix/store/8636r3d8rsk7c3l5xcgb1mn37pkfc84k-ncurses-6.3-p20220507/lib -L/nix/store/v3j1blvixih1gd29l8j1mxaf3v26cn2w-libffi-3.4.2/lib -L/nix/store/kxxxzpxww678wwbx78cq5in7gmdnmybq-gmp-with-cxx-6.2.1/lib'
export NIX_LDFLAGS
NIX_LIB64_IN_SELF_RPATH='1'
NIX_NO_SELF_RPATH='1'
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OBJCOPY='objcopy'
export OBJCOPY
OBJDUMP='objdump'
export OBJDUMP
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/knssayvl4p7gfapib4wcfhzy14169kva-patchelf-0.14.5/bin:/nix/store/ag2bpk0lzjvj409znklrz5krkpc5imzs-gcc-wrapper-11.3.0/bin:/nix/store/as1xzrm2921pnxx4jvxj39jn4v88wdy1-gcc-11.3.0/bin:/nix/store/h0cnbmfcn93xm5dg2x27ixhag1cwndga-glibc-2.34-210-bin/bin:/nix/store/7jr7pr4c6yb85xpzay5xafs5zlcadkhz-coreutils-9.0/bin:/nix/store/wp7kc5y840ldi5sd8j81fj4dabccff2d-binutils-wrapper-2.38/bin:/nix/store/rq6bh3qfrqnyqwik0w3q6w180zg3w2pa-binutils-2.38/bin:/nix/store/4bwp189vbs0wzxygk4rgay56jlhn1bd2-cachix-0.8.1/bin:/nix/store/zr34apqipn3pp6k6m6b1ifwhhmrp08im-postgresql-14.4/bin:/nix/store/x836b8grlahay8rljgrfcqqiyj02hm4j-ghc-9.2.2/bin:/nix/store/jb6caagsqz5rr3l037hd537hl15qj7xi-cabal-install-3.6.2.0/bin:/nix/store/fazlw44alji2x0icmjic7n61mv4ihmxh-implicit-hie-0.1.2.7/bin:/nix/store/4r6dvlaknnwf4f2y3k4ynlclg3ag2pba-fourmolu-0.6.0.0/bin:/nix/store/kqbypv2jd90f08hrzqhgqwmps9x2ss86-haskell-language-server-1.7.0.0/bin:/nix/store/pff644yw6lcm2cvqrn2k8z8jz8f5vwph-aeson-pretty-0.8.9/bin:/nix/store/c1xw24435722whrbg64hjfnam2fswnva-ghcide-1.7.0.0/bin:/nix/store/kcj90y2mxjqisl5jzfd8zxw8nf2y5527-constraints-extras-0.3.2.1/bin:/nix/store/cxrx9w34xlz5gyw4z4y7r3d7yg03b8jb-hie-bios-0.9.1/bin:/nix/store/yxryjxli7pcarbnirv9psl01nc8pkhk9-hiedb-0.4.1.0/bin:/nix/store/1wl0wxpjm1sdf5x3zpjc4zrx7pvwbbfg-retrie-1.2.0.1/bin:/nix/store/8h1sbx544ks7lp3d3bywmhhdh7rv018c-shake-0.19.6/bin:/nix/store/zjb06k4zrlpdjn6vb6xm7jn3gijabcaw-floskell-0.10.6/bin:/nix/store/wrwdq93638dfb2byks2y0giy1svzyp2m-ormolu-0.5.0.0/bin:/nix/store/a020hp882w0blbc4hfqf277jfz7vxfbz-cabal2nix-2.18.0/bin:/nix/store/g36xayzhsnlybfc6pb31z8klsb486v7a-hpack-0.34.7/bin:/nix/store/gslcxcjlgx326qg3fzyh5qabzvjmilkj-cabal-fmt-0.1.6/bin:/nix/store/8636r3d8rsk7c3l5xcgb1mn37pkfc84k-ncurses-6.3-p20220507/bin:/nix/store/7jr7pr4c6yb85xpzay5xafs5zlcadkhz-coreutils-9.0/bin:/nix/store/140f6s4nwiawrr3xyxarmcv2mk62m62y-findutils-4.9.0/bin:/nix/store/35swvg68q1j3m9fbhcdnqwk9mlm8plvn-diffutils-3.8/bin:/nix/store/lgvd2fh4cndlv8mnyy49jp1nplpml3xp-gnused-4.8/bin:/nix/store/qd9jxc0q00cr7fp30y6jbbww20gj33lg-gnugrep-3.7/bin:/nix/store/w3p77mkdy3pigg12iyha8y9dqakhjsxn-gawk-5.1.1/bin:/nix/store/jm7czg4lgfhiphkyjwn1k1i8liqqizgi-gnutar-1.34/bin:/nix/store/vqpkbr3isafl4867app44w636zrkr9wp-gzip-1.12/bin:/nix/store/fkwcqfw3gcspmpmxqxqnxjja74sg207g-bzip2-1.0.6.0.2-bin/bin:/nix/store/4gkcrzpn31sb12fnzclyfzhpd8xh8l6x-gnumake-4.3/bin:/nix/store/iffl6dlplhv22i2xy7n1w51a5r631kmi-bash-5.1-p16/bin:/nix/store/c0hmdlwdd85gzmilafg4gzzdb2vpg176-patch-2.7.6/bin:/nix/store/kyg5qxx0nl5hfjx0kgw120b85i4l6i8y-xz-5.2.5-bin/bin'
export PATH
PS4='+ '
RANLIB='ranlib'
export RANLIB
READELF='readelf'
export READELF
SHELL='/nix/store/iffl6dlplhv22i2xy7n1w51a5r631kmi-bash-5.1-p16/bin/bash'
export SHELL
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
XDG_DATA_DIRS='/nix/store/knssayvl4p7gfapib4wcfhzy14169kva-patchelf-0.14.5/share'
export XDG_DATA_DIRS
buildInputs='/nix/store/4bwp189vbs0wzxygk4rgay56jlhn1bd2-cachix-0.8.1 /nix/store/zr34apqipn3pp6k6m6b1ifwhhmrp08im-postgresql-14.4 /nix/store/x836b8grlahay8rljgrfcqqiyj02hm4j-ghc-9.2.2 /nix/store/jb6caagsqz5rr3l037hd537hl15qj7xi-cabal-install-3.6.2.0 /nix/store/fazlw44alji2x0icmjic7n61mv4ihmxh-implicit-hie-0.1.2.7 /nix/store/4r6dvlaknnwf4f2y3k4ynlclg3ag2pba-fourmolu-0.6.0.0 /nix/store/kqbypv2jd90f08hrzqhgqwmps9x2ss86-haskell-language-server-1.7.0.0 /nix/store/a020hp882w0blbc4hfqf277jfz7vxfbz-cabal2nix-2.18.0 /nix/store/gslcxcjlgx326qg3fzyh5qabzvjmilkj-cabal-fmt-0.1.6'
export buildInputs
buildPhase='echo "------------------------------------------------------------" >>$out
echo " WARNING: the existence of this path is not guaranteed." >>$out
echo " It is an internal implementation detail for pkgs.mkShell."   >>$out
echo "------------------------------------------------------------" >>$out
echo >> $out
# Record all build inputs as runtime dependencies
export >> $out
'
export buildPhase
builder='/nix/store/iffl6dlplhv22i2xy7n1w51a5r631kmi-bash-5.1-p16/bin/bash'
export builder
configureFlags=''
export configureFlags
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/knssayvl4p7gfapib4wcfhzy14169kva-patchelf-0.14.5 /nix/store/59jmzisg8fkm9c125fw384dqq1np602l-move-docs.sh /nix/store/kxw6q8v6isaqjm702d71n2421cxamq68-make-symlinks-relative.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/bkxq1nfi6grmww5756ynr1aph7w04lkk-strip.sh /nix/store/bnj8d7mvbkg3vdb07yz74yhl3g107qq5-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/8zxndz5ag0p6s526c2xyllhk1nrn4c3i-audit-tmpdir.sh /nix/store/c8n9kcdddp9np665xz6ri61b383nxvz8-move-systemd-user-units.sh /nix/store/1i5y55x4b4m9qkx5dqbmr1r6bvrqbanw-multiple-outputs.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh /nix/store/wlwcf1nw2b21m4gghj70hbg1v7x53ld8-reproducible-builds.sh /nix/store/ag2bpk0lzjvj409znklrz5krkpc5imzs-gcc-wrapper-11.3.0'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=()
declare -a envBuildHostHooks=()
declare -a envBuildTargetHooks=()
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=()
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' '_makeSymlinksRelative' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_doStrip' 'patchShebangsAuto' '_pruneLibtoolFiles' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' '_moveSystemdUserUnits' '_moveSbin' '_moveLib64' )
guess='12'
initialPath='/nix/store/7jr7pr4c6yb85xpzay5xafs5zlcadkhz-coreutils-9.0 /nix/store/140f6s4nwiawrr3xyxarmcv2mk62m62y-findutils-4.9.0 /nix/store/35swvg68q1j3m9fbhcdnqwk9mlm8plvn-diffutils-3.8 /nix/store/lgvd2fh4cndlv8mnyy49jp1nplpml3xp-gnused-4.8 /nix/store/qd9jxc0q00cr7fp30y6jbbww20gj33lg-gnugrep-3.7 /nix/store/w3p77mkdy3pigg12iyha8y9dqakhjsxn-gawk-5.1.1 /nix/store/jm7czg4lgfhiphkyjwn1k1i8liqqizgi-gnutar-1.34 /nix/store/vqpkbr3isafl4867app44w636zrkr9wp-gzip-1.12 /nix/store/fkwcqfw3gcspmpmxqxqnxjja74sg207g-bzip2-1.0.6.0.2-bin /nix/store/4gkcrzpn31sb12fnzclyfzhpd8xh8l6x-gnumake-4.3 /nix/store/iffl6dlplhv22i2xy7n1w51a5r631kmi-bash-5.1-p16 /nix/store/c0hmdlwdd85gzmilafg4gzzdb2vpg176-patch-2.7.6 /nix/store/kyg5qxx0nl5hfjx0kgw120b85i4l6i8y-xz-5.2.5-bin'
name='nix-shell'
export name
nativeBuildInputs=''
export nativeBuildInputs
out='/home/gareth/code/classy-postgresql/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/ag2bpk0lzjvj409znklrz5krkpc5imzs-gcc-wrapper-11.3.0'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/knssayvl4p7gfapib4wcfhzy14169kva-patchelf-0.14.5' '/nix/store/59jmzisg8fkm9c125fw384dqq1np602l-move-docs.sh' '/nix/store/kxw6q8v6isaqjm702d71n2421cxamq68-make-symlinks-relative.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/bkxq1nfi6grmww5756ynr1aph7w04lkk-strip.sh' '/nix/store/bnj8d7mvbkg3vdb07yz74yhl3g107qq5-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/8zxndz5ag0p6s526c2xyllhk1nrn4c3i-audit-tmpdir.sh' '/nix/store/c8n9kcdddp9np665xz6ri61b383nxvz8-move-systemd-user-units.sh' '/nix/store/1i5y55x4b4m9qkx5dqbmr1r6bvrqbanw-multiple-outputs.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh' '/nix/store/wlwcf1nw2b21m4gghj70hbg1v7x53ld8-reproducible-builds.sh' '/nix/store/ag2bpk0lzjvj409znklrz5krkpc5imzs-gcc-wrapper-11.3.0' '/nix/store/wp7kc5y840ldi5sd8j81fj4dabccff2d-binutils-wrapper-2.38' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=()
declare -a pkgsHostTarget=('/nix/store/4bwp189vbs0wzxygk4rgay56jlhn1bd2-cachix-0.8.1' '/nix/store/zr34apqipn3pp6k6m6b1ifwhhmrp08im-postgresql-14.4' '/nix/store/aqzd72fb59ssappmmkcajqakq3qa4s8z-postgresql-14.4-lib' '/nix/store/x836b8grlahay8rljgrfcqqiyj02hm4j-ghc-9.2.2' '/nix/store/jb6caagsqz5rr3l037hd537hl15qj7xi-cabal-install-3.6.2.0' '/nix/store/fazlw44alji2x0icmjic7n61mv4ihmxh-implicit-hie-0.1.2.7' '/nix/store/4apdmcm2358xrzh1wpjy50ngq5qyswla-attoparsec-0.14.4' '/nix/store/07608gz29b6hy4nkcablai478p6pklq4-scientific-0.3.7.0' '/nix/store/2nqy2dmn75iijnp9g53p2dmdk58sxqj0-hashable-1.4.0.2' '/nix/store/bswbdw49n0pr8mj4wc6f4m0a8fb4dcp8-base-orphans-0.8.6' '/nix/store/42jbj6kl5ma6vv2kwgazwy2pv79ff7g4-integer-logarithms-1.0.3.1' '/nix/store/g7d2qi6ikcprpxmsk5khcf4fq66g541b-primitive-0.7.3.0' '/nix/store/iz0579d9mgn8fa8cgl4hda1jvki9khsr-filepattern-0.1.2' '/nix/store/7dnr8lv9r4as9vsb4662rg7dv23w3rvq-extra-1.7.10' '/nix/store/lld6w85imz9dh1x87bmmf86mdzk2gzq2-clock-0.8.3' '/nix/store/3r20d2d3hpwwf58y11izj1i5m2kkfycp-yaml-0.11.8.0' '/nix/store/gvd747b03bwa4n4fs4djwksxkzvp8i9c-aeson-2.0.3.0' '/nix/store/0bdb0zhq41nqc4ksjki4zzvl52s7v9za-base-compat-batteries-0.12.1' '/nix/store/4fanhqfpfja30pckpf9qb8rr1g7pv4cy-base-compat-0.12.1' '/nix/store/k83vyjvqdjlicnjjlrxkgbi1hk2drg12-data-fix-0.3.2' '/nix/store/cqlbly8p6rn6hbndxlrsg18bpl0km9fh-dlist-1.0' '/nix/store/43qcy3sfgp2f1nfi7q310gx4k9l0b9zj-indexed-traversable-0.1.2' '/nix/store/fwp07a3lcln6j25j16ym7hl8bw4fqgyg-OneTuple-0.3.1' '/nix/store/qwqpc7ya5j0jfvvl5j52rhhyf5ldah5v-QuickCheck-2.14.2' '/nix/store/rkrmm2jk4d2clkl0imkkgkr72kh65szm-random-1.2.1' '/nix/store/j5gpzh2yq9mlqcg9rlgqxai122i6sv3v-splitmix-0.1.0.4' '/nix/store/j5gpzh2yq9mlqcg9rlgqxai122i6sv3v-splitmix-0.1.0.4' '/nix/store/k3x9dcxd22jv4xfvsj8d4z1jvazjy4fr-semialign-1.2.0.1' '/nix/store/bm9inkxrb8fmym1zkswz7zsh595hyr14-indexed-traversable-instances-0.1.1' '/nix/store/qp6qh3hzp45bm0nddd6f5l41g9y90v75-tagged-0.8.6.1' '/nix/store/axjmwx99g6lw88021il1chkhg0kk0nmb-unordered-containers-0.2.17.0' '/nix/store/dn07ilp3a7yplf8kj137f0sjfkllys0r-vector-0.12.3.1' '/nix/store/bqzzkl402am9lyxzpzs24mwj0d1gfc5q-semigroupoids-5.3.7' '/nix/store/1qpvg3l15s4mhs1c6lg4xvxrfrmffib2-bifunctors-5.5.11' '/nix/store/m8gcjs56vwl2hxcmw9bydrxf578jcga7-comonad-5.0.8' '/nix/store/nzg4nmb1347z9mzb7m1jf811jz78xsgj-distributive-0.6.2.1' '/nix/store/sdpsd8hagn1sjq5vnrlvh9b9d05wjxwy-transformers-compat-0.6.6' '/nix/store/bgmlq4xncqlqsgz4yphz22w6yc5wvkam-th-abstraction-0.4.3.0' '/nix/store/v7xp1cpi6kldkhc9l0k62nxrynghb0k2-contravariant-1.5.5' '/nix/store/fqjxlxihx7y52x0kfk3wxjiq2xx2lvrl-StateVar-1.2.2' '/nix/store/f1i6a8fj4jrw4nr8h916ilp5anw1izzx-these-1.1.1.1' '/nix/store/fd9w1kqfcv7zibvv6ddiwr8bbwirry1d-assoc-1.0.2' '/nix/store/qz5zk26q3gii3i85h4w5mq8yng1vzj8b-strict-0.4.0.1' '/nix/store/jmx9sjyfy5hygf5lqv58kbyw0hbk9akx-text-short-0.1.5' '/nix/store/v21vwf4a5xmlh03i3ad2pbg8phq5wqg7-time-compat-1.9.6.1' '/nix/store/8gwsn4v9wb3f306fc1hanarci99qjgl7-uuid-types-1.0.5' '/nix/store/da1nxbqz4csls775bcyxy7nj6nid9i3w-witherable-0.4.2' '/nix/store/p6xmj2w483mhq289r0m4daypvayhsk4f-conduit-1.3.4.2' '/nix/store/fcgqdpz0vn8iny4wnfa4kvpdhdwr2r13-mono-traversable-1.0.15.3' '/nix/store/5r8ifvnc8yqxbadj6x0wbwf8biq16mll-split-0.2.3.4' '/nix/store/2bm4vysp9j6s9lmmqv3bprbscl9cl962-vector-algorithms-0.8.0.4' '/nix/store/sh789hvbknq3rgqwjn2wi1zbrla7m1f2-resourcet-1.2.4.3' '/nix/store/ynizz2a92pxz844k72kg2c3mgip6kb2r-unliftio-core-0.2.0.1' '/nix/store/ynizz2a92pxz844k72kg2c3mgip6kb2r-unliftio-core-0.2.0.1' '/nix/store/2k0lamgb7y3ily8d9d9i7mpqx4ppsxhv-libyaml-0.1.2' '/nix/store/4r6dvlaknnwf4f2y3k4ynlclg3ag2pba-fourmolu-0.6.0.0' '/nix/store/5zpl4hb7nsjh551xr0c7j06j2vxmwz2m-ansi-terminal-0.11.3' '/nix/store/mx6j2f9r0x640s1g5qmbibndq71z33cj-colour-2.3.6' '/nix/store/h2n7arx1j1cmvmivdl5gjv8lbm7cqvh8-Diff-0.4.1' '/nix/store/8fqsrqm341m3k2shpa9za9isnbrf03sb-ghc-lib-parser-9.2.2.20220307' '/nix/store/8imskab7nywnkhyr7m3hvqki92a1ckxw-HsYAML-0.2.1.0' '/nix/store/cn9yh5prnpwa6vyys623nryzqbqs73gi-HsYAML-aeson-0.2.0.1' '/nix/store/1bmih8pf8gvbnpclsrh2kqbclkvqsx3z-syb-0.7.2.1' '/nix/store/kq9p0j61340rlhflj5fdqdpwpv1k0qvy-gitrev-1.3.1' '/nix/store/v9cnqfxxnbmfsy422bzidlp2lpyj8hvm-optparse-applicative-0.16.1.0' '/nix/store/pq0g5drd6ksikj856m2llfbhsw80bwkp-ansi-wl-pprint-0.6.9' '/nix/store/kqbypv2jd90f08hrzqhgqwmps9x2ss86-haskell-language-server-1.7.0.0' '/nix/store/pff644yw6lcm2cvqrn2k8z8jz8f5vwph-aeson-pretty-0.8.9' '/nix/store/6zffyprz7jm33ls5kw49y0nc8knvi7g4-cmdargs-0.10.21' '/nix/store/lbf7rcyrsdz51xglx8s686jbi9ndmddz-async-2.2.4' '/nix/store/ap0nx7s8fbc8q4s9l8lrhc2dvkgxn3d0-base16-bytestring-1.0.2.0' '/nix/store/p0smpnzbbzb3gi9jyzmr20f3712xl5i3-cryptohash-sha1-0.11.101.0' '/nix/store/0ya3fsqfi7i7rqz6l95xh432qf7k18z3-data-default-0.7.1.1' '/nix/store/dz6yqzyv9s3s0hiayg2fx2f4jyqal59g-data-default-class-0.1.2.0' '/nix/store/11k1rrfgk98gik99q1xmzf4ynmp2idfd-data-default-instances-containers-0.0.1' '/nix/store/mjligbiaf1wawzagflsmpa19v63nbxky-data-default-instances-dlist-0.0.1' '/nix/store/dqfyynn9jr2pj5ifldzf9lwnaabgi23j-data-default-instances-old-locale-0.0.1' '/nix/store/rjqqksyggnvvh5cxd3phnn9b7fzwmv73-old-locale-1.0.0.7' '/nix/store/c1xw24435722whrbg64hjfnam2fswnva-ghcide-1.7.0.0' '/nix/store/v2rhs19bavjmclsxja3rli81xm2x0943-case-insensitive-1.2.1.0' '/nix/store/fvl9l8nd2ji304zdc6prdybxynsrf4wv-dependent-map-0.4.0.0' '/nix/store/kcj90y2mxjqisl5jzfd8zxw8nf2y5527-constraints-extras-0.3.2.1' '/nix/store/ynjvjaszpbfsynnsirj454j2ki6l7lqr-constraints-0.13.3' '/nix/store/msdqri7dd4hj34ibish471ybrs2rxl85-type-equality-1' '/nix/store/72bvvjyy4ds1pxnzc8yn4wf1qwkgyxpx-dependent-sum-0.7.1.0' '/nix/store/s51pxs142p6507xijdyscy7q178hl75x-some-1.0.3' '/nix/store/ai3l2k32f3g7f40j459inyljanbhfp4j-enummapset-0.6.0.3' '/nix/store/kcl002r9h1yfcr96dxjv3yvhicizy34l-semigroups-0.19.2' '/nix/store/j468dysfzhy7p2c2q1hlvk4wvirrxzw1-fingertree-0.1.5.0' '/nix/store/vmc4fq9772xijr5c3vw49d8gh2dh9dwq-focus-1.0.3' '/nix/store/cixqq99w53043rg064q4ahd22j5p6qym-ghc-check-0.5.0.6' '/nix/store/l02bk77p5nssqqva878sc8bblgvsagfp-ghc-paths-0.1.0.12' '/nix/store/4g5dwa2fjahki528iacjhss04257avl3-safe-exceptions-0.1.7.2' '/nix/store/l2mii9hzi8cfv8m9j8q399sa095dpaag-th-compat-0.1.3' '/nix/store/x8g6nn59y984w2h9brmhs2aahkm9nsd7-ghc-exactprint-1.5.0' '/nix/store/6gq2wlqx1wcw31ymw1l5bln9fxca4bz8-fail-4.9.0.0' '/nix/store/6vxzz7ni5yji957a7g6b3djyw502q6n5-ordered-containers-0.2.2' '/nix/store/i96a8ps3p5vfzsv31d210z0ww0a9vxqn-free-5.1.7' '/nix/store/rh7f1c4i9hgr5l83mvsf5pjyz89c89ra-profunctors-5.6.2' '/nix/store/28dfj50qn0cp483n4h7bhi4dwdwfspfj-transformers-base-0.4.6' '/nix/store/wf3wyzff6b5qw3fq0fkn1p8vq19h75jr-ghc-trace-events-0.1.2.5' '/nix/store/19ha76c3052a58mh9hvmfxmsy2g9ab50-Glob-0.10.2' '/nix/store/9r00phvnnk8qjjn3kacvpjkz98yjb5yb-haddock-library-1.10.0' '/nix/store/azyx2ydrj06msxf8ikb0jlsxdk9dhkhz-heapsize-0.3.0.1' '/nix/store/q5xmlrvvp9xl3pazh801ipmxcn4sxvlg-hashtables-1.2.4.2' '/nix/store/cxrx9w34xlz5gyw4z4y7r3d7yg03b8jb-hie-bios-0.9.1' '/nix/store/lxmldlwfqd45g1nr11gdwalq43xwx1y1-conduit-extra-1.3.5' '/nix/store/i1mb76nlqppzy22piqg09fnzfd18pm36-network-3.1.2.7' '/nix/store/96pvf58c39i3cvcv11f58lsck07zm239-streaming-commons-0.2.2.4' '/nix/store/vpdx9pvbb0apc5dzx4id9fyvhb2ckh1v-zlib-0.6.2.3' '/nix/store/qr84hd97hx0qczwxqy751pvwnfy1imbi-typed-process-0.2.8.0' '/nix/store/aagn9nb3mnx5fi48x8zr5jh706bf6qrd-file-embed-0.0.15.0' '/nix/store/fc64530qdw1w53w290v1gkq5f09bra90-hslogger-1.3.1.0' '/nix/store/h0ds3hzy5r62f1n8kzkf98hxp7bd6n3b-network-bsd-2.8.1.0' '/nix/store/l66nrq9phf0w1y4vr4561mrbb0p5p75s-temporary-1.3' '/nix/store/57665jdd6jqsy5rr147rv53glmglmb0z-unix-compat-0.5.4' '/nix/store/v08cxigm23pvyg9kkb745vxmmqzk6dg0-hie-compat-0.2.1.1' '/nix/store/yxryjxli7pcarbnirv9psl01nc8pkhk9-hiedb-0.4.1.0' '/nix/store/j0xqkvn68rx218mlailr7pmqph6lqn1b-algebraic-graphs-0.6' '/nix/store/zd816wl4igw698krgvmcwp6290s55qi8-lucid-2.11.0' '/nix/store/yrf9ilkv3701bjsy4bbvrzwb92pa645a-blaze-builder-0.4.2.2' '/nix/store/lyp7msc6r2rybvz4ny7vaaz8l0fcz5k8-mmorph-1.1.5' '/nix/store/w04023rslbw3hqjhal2sp1zjxprwq7xy-sqlite-simple-0.4.18.0' '/nix/store/by70qpny753jdm2vxh5xpfzff70a1m19-blaze-textual-0.2.2.1' '/nix/store/5s1ymdq167swhlxkklmhqn458xpwywf5-direct-sqlite-2.3.26' '/nix/store/ljfcjjc603zh2zyhjh7q6zl2wmqcxi3j-Only-0.1' '/nix/store/18cd8czl8606yqwmbvaf2zqamkag2x2f-terminal-size-0.3.3' '/nix/store/yrhwqs0qhkwq8crxkq5qlczc80f0d954-hls-graph-1.7.0.0' '/nix/store/z6bpxi30ln40wk2hq2jf8rvqhiiygfz8-js-dgtable-0.5.2' '/nix/store/h45mw0nglll9bsv39inaji6b5m0zy0ff-js-flot-0.8.3' '/nix/store/6b1vpv8fdbq24xrx7zkr7c0m359ralf9-js-jquery-3.3.1' '/nix/store/877b161pp810cl5kfjydv59h27fydybm-list-t-1.0.5.1' '/nix/store/i4x1alm1nzlchgwmp538zn06cwbdqb72-foldl-1.4.12' '/nix/store/v2l626bgb6hykkvn3mrmb751c6acm0hc-logict-0.7.1.0' '/nix/store/a829lp4ywlhwisbw0q668v67c5p9qssg-monad-control-1.0.3.1' '/nix/store/svvmdpwfa7ixkxgw4832pka8qvaw1131-stm-containers-1.2' '/nix/store/nakwv12dpxh96ir82xy174b67sj5p3rl-deferred-folds-0.9.18.1' '/nix/store/ngnvmaipbvkdpmsj3nmcw7y23rjca4y0-stm-hamt-1.2.0.7' '/nix/store/yazn6z9sxls8dbkg3vgp5akfhwwyvm67-primitive-extras-0.10.1.4' '/nix/store/56ddbyb8hw026q5fqvzxaa6k0jzy0gmh-cereal-0.5.8.2' '/nix/store/ynbqb128xj9q8nzbk2dzj5iy2w15gpls-primitive-unlifted-0.1.3.1' '/nix/store/c93lz4ij9qhp9g56lgkm3k6k8l2n56bd-hls-plugin-api-1.4.0.0' '/nix/store/mvy4azmp3ff0fqnifk4kksi4qg2d8qpm-lens-5.1' '/nix/store/1q0lqkyrxg2jivs47rq6nfpjgag525a4-call-stack-0.4.0' '/nix/store/9v353nf2rg54z94sd2mwbfm1fh26hgis-kan-extensions-5.2.3' '/nix/store/gv1zwyz33v6pvhsh9kdwwn2r21dmj75y-adjunctions-4.4' '/nix/store/0p21gdjmxp73kv11v14qa86p37x1vxzl-void-0.7.3' '/nix/store/ayz9vbxqrmqcb65cb9iyp2rbbjjkflzj-invariant-0.5.5' '/nix/store/b3wgmqlddnfahpncgwq0lqrgiwsf6v6a-parallel-3.2.2.0' '/nix/store/j8pjsp2lpa5rgn4iqwxnrz2nc3na0cg8-reflection-2.1.6' '/nix/store/alq576i4ibiv06cnyjsmw56i9cqq5f4m-lens-aeson-1.1.3' '/nix/store/6da7vpxdjxa1hsksyxgp4akzpwic9wmp-lsp-1.4.0.0' '/nix/store/9p0ppnmsh83qirlsw9dsf6v4p6pbzd1m-lsp-types-1.4.0.1' '/nix/store/8585jf4njy79vn1a08q79j7ylbqgy181-mod-0.1.2.2' '/nix/store/hhxhwriirgyy3470lnmhf1ar79da4c70-semirings-0.6' '/nix/store/c4jj8fhjf2i03icarg6sv4h5cn6n8lqy-network-uri-2.6.4.1' '/nix/store/fg3l3hf7h2x1y5v91k2cyic3bqxin7zr-rope-utf16-splay-0.3.2.0' '/nix/store/2sxcf76jcf3y741viws63bkhjrly59dj-sorted-list-0.2.1.0' '/nix/store/3x8wkzk74l8hak3mrralkmshjj65ciz7-uuid-1.3.15' '/nix/store/8w9n4bnxvhffpya9vp4cxbrq2dihlv1v-cryptohash-md5-0.11.101.0' '/nix/store/b8bkwqr11qdi67f504a3jazlafrgl2g1-entropy-0.4.1.7' '/nix/store/rgmbimhqnf84r9drchfn8l0f2swslqmq-network-info-0.2.1' '/nix/store/1whfpm0dnrrlrji3n48zkn83yfa18jiy-opentelemetry-0.7.0' '/nix/store/p2x827jd4plqrzqajvyqcfkaql0lxj7y-regex-tdfa-1.3.1.2' '/nix/store/ic0ra673nr2wkgkj8lm0nf6iwlyiz3mq-regex-base-0.94.0.2' '/nix/store/3km2v0jnrxx09fc9km2g8x0g7hm7d2zk-implicit-hie-cradle-0.5.0.0' '/nix/store/v1n0kgrpn6mcqgw8m2a42xyj28lv7y9q-monoid-subclasses-1.1.3' '/nix/store/n1cvzg4m6ibby8gl3dbk6qp2vrzfgmy1-primes-0.2.1.0' '/nix/store/0cg08ca1d0xv6m8fhz3cx7l8ki4zd01j-prettyprinter-1.7.1' '/nix/store/ic68p29sb2640ar9scpbrp79wkr3vrbb-prettyprinter-ansi-terminal-1.1.3' '/nix/store/1wl0wxpjm1sdf5x3zpjc4zrx7pvwbbfg-retrie-1.2.0.1' '/nix/store/i7ggq96x3p4gl0myslaw3bsapjfrxcmb-random-shuffle-0.0.4' '/nix/store/19z71shb7gyzkc5kg17n4cpmlb1c7wjs-MonadRandom-0.5.3' '/nix/store/q27vz9nn63nnh4aiqd3zpqmcq5hyy9sc-haskell-src-exts-1.23.1' '/nix/store/6yh70fx2kcb04wvjg0iykz4dxj0gvdlz-safe-0.3.19' '/nix/store/krszqgjnmcy2xca7yfpczmaqdm7pw238-unliftio-0.2.22.0' '/nix/store/9mip10lhc7jx6q1fgm3qpfbdfhws65a2-utf8-string-1.0.2' '/nix/store/5jqcyza2w9b40fkkk9r869cvvzjyjy1z-lsp-test-0.14.0.2' '/nix/store/1aq9q9a7rqcy0ccsc02j5pl763q8vlp1-conduit-parse-0.2.1.0' '/nix/store/pbqngr5hxyqxfig2g9n6nlp559ng07x3-parsers-0.12.10' '/nix/store/7jqjj4ph75rqzx2blfvk5gjaya2jvbl9-charset-0.3.9' '/nix/store/d2fa4icf0gkig9c6a1pirzxrfqh228nd-parser-combinators-1.3.0' '/nix/store/8h1sbx544ks7lp3d3bywmhhdh7rv018c-shake-0.19.6' '/nix/store/86diql8f4g3vh89c2vzdmmg32bacpayw-heaps-0.4' '/nix/store/86diql8f4g3vh89c2vzdmmg32bacpayw-heaps-0.4' '/nix/store/3iq8hp6pq5jig1mb89lhbpwgqq93knhq-tasty-hunit-0.10.0.3' '/nix/store/0n1ah79cilxagznyw8i5x81vwm5x3in7-tasty-1.4.2.1' '/nix/store/69in6hm58yspl502py8fxh9nqqbq8hsd-unbounded-delays-0.1.1.1' '/nix/store/mi57fbla827k0lbks0qjwhizbpq5gvzi-wcwidth-0.0.2' '/nix/store/0ai0mbh1p1390l0xmyq98v6qx7bdn421-githash-0.1.6.2' '/nix/store/dpd3c2p1flifpd353s40igqmfj73s9fs-optparse-simple-0.1.1.4' '/nix/store/j8qb34vcacar3596lqv0p6ip3s9sj7yn-hls-alternate-number-format-plugin-1.1.0.0' '/nix/store/ikj4nfib7cc78ryjr5r3zl8nk6hjd2y5-hls-call-hierarchy-plugin-1.0.3.0' '/nix/store/5hfs9gi34paqbc73q539zb0q6507c596-hls-change-type-signature-plugin-1.0.1.0' '/nix/store/xx6nqdpxbkg42ilzy4s3zcg9xj684qj1-hls-class-plugin-1.0.3.0' '/nix/store/1ivjjhkm7fmy1fm46bjrcl02sm9ch8gn-hls-eval-plugin-1.2.2.0' '/nix/store/mc5g9dxdpl2rcc25liqbwq5g2i53vdd0-megaparsec-9.2.0' '/nix/store/p8x6xn6ifh4r8ibcvwz6wj220r7n96s7-pretty-simple-4.0.0.0' '/nix/store/l7ks1izp98h58hp4y01m6jf4p95g1j3w-hls-explicit-imports-plugin-1.1.0.0' '/nix/store/4y4iq52wrvrflvrgg8kga0ai4kcl4y8i-hls-floskell-plugin-1.0.1.1' '/nix/store/zjb06k4zrlpdjn6vb6xm7jn3gijabcaw-floskell-0.10.6' '/nix/store/ckrgavm7cl76xs3k14kc31wklrv4cpqm-monad-dijkstra-0.1.1.3' '/nix/store/dsal56p3da7faf4853pr50i3b8iz86ja-psqueues-0.2.7.3' '/nix/store/gvv51cihmjm1szxwybmmzajqxzwrp344-hls-fourmolu-plugin-1.0.3.0' '/nix/store/9a6l0203nzcmyj681w8mzbnpag26v55r-process-extras-0.7.4' '/nix/store/sllcxngjrwcg6pdfxrc8d5zzlwxd4z0n-generic-deriving-1.14.1' '/nix/store/c8g6d9gln0pfx5qhbw6zi1yzc2nwmbar-ListLike-4.7.6' '/nix/store/63haw763ywq424painmyzhhzfzz9v4ix-fmlist-0.9.4' '/nix/store/4r145g90zwghx8x3q9pbznv5b69hl37j-hls-module-name-plugin-1.0.2.0' '/nix/store/0kxii8xdp0a7p4ys0bs6irxg9r1vq0sy-hls-ormolu-plugin-1.0.2.1' '/nix/store/wrwdq93638dfb2byks2y0giy1svzyp2m-ormolu-0.5.0.0' '/nix/store/ljysd12v6wdnxv7jm5sn1gn5ajbplxc1-MemoTrie-0.6.10' '/nix/store/c9xl73h8inbr9a9jacxy3x4c494kzlgs-newtype-generics-0.6.1' '/nix/store/n1wmnr610dpbai2zh03hbm7fkl3wrfw7-th-lift-instances-0.1.19' '/nix/store/2s72brl7qgip9xvaxi4jy91150s1rxb6-th-lift-0.8.2' '/nix/store/pa52aapzrbi7if6698jjjny8jbcgx4mg-hls-pragmas-plugin-1.0.2.1' '/nix/store/v64n6042sq4gckm84ac0xsx576scg6dy-fuzzy-0.1.0.1' '/nix/store/ywy0qp3lcdgd2q7019iybh5656hz4dqg-hls-qualify-imported-names-plugin-1.0.1.0' '/nix/store/sgvpgk7rscpzmj5lfkz795lmd4k0yml8-hls-refine-imports-plugin-1.0.2.0' '/nix/store/8nylpr6pgvrpjg0cbj05idvvraisdjz8-hls-rename-plugin-1.0.0.2' '/nix/store/c8v31v6sgz8hkmfq1hgdmm3qh1yhcdh8-hls-selection-range-plugin-1.0.0.0' '/nix/store/a020hp882w0blbc4hfqf277jfz7vxfbz-cabal2nix-2.18.0' '/nix/store/iwp1hxf960f0aabrjn58nrv29fbkmfjl-distribution-nixpkgs-1.6.2' '/nix/store/3163fw5h7nai6csn9gxc80ah6jv1idp6-language-nix-2.2.0' '/nix/store/n5n3m1g2cc079h319hcvj3hkbdj3x2ac-parsec-class-1.0.0.0' '/nix/store/68fh96qqa2fk941m8ajq5673y8qzbvc7-hackage-db-2.1.2' '/nix/store/3rjsprdd4wmspph25dc7m52hwflr3aq6-tar-0.5.1.1' '/nix/store/f30pr9zlzzq0dhaavfca7ijfsyb1w03q-hopenssl-2.2.4' '/nix/store/g36xayzhsnlybfc6pb31z8klsb486v7a-hpack-0.34.7' '/nix/store/slnr0cj2zpnspsp5q5w4f1hcjklhi1lr-cryptonite-0.29' '/nix/store/clbrj09j3jqwxxnnqdslbjck28np6kwq-basement-0.0.14' '/nix/store/0cp7rivlzdfapqcmm7xzran40dvzb454-memory-0.16.0' '/nix/store/4saspkszrr23xka664aymbmj9klzklcr-http-client-0.7.11' '/nix/store/cmv53rqhbby6p7dhzhiyra0k47qavlc2-base64-bytestring-1.2.1.0' '/nix/store/qn06mm8g6sn20c1s1331xxc16r9rjjzm-cookie-0.4.5' '/nix/store/j2gr1xi2msyz942yw280ds3c7bjf0v7w-http-types-0.12.3' '/nix/store/92ijhrv6vb9lsmrvrwxgsa830j2a2g0h-iproute-1.7.12' '/nix/store/3ch1q7d61i7xx66yhl308qg29zhw6g46-appar-0.1.8' '/nix/store/7pczhshc0mhbwpa0q2p8wfk6cb9wh3x3-byteorder-1.0.4' '/nix/store/sfra28py4dp7dc66r7f17n8wsan3nrvf-mime-types-0.1.0.9' '/nix/store/w4drmfwdjjbpvrb2bw46smfnfbdrp5c1-http-client-tls-0.3.6.1' '/nix/store/k5qg90jh60xc06llgsvccgbvni3n995s-connection-0.3.1' '/nix/store/wmivib8sp86wab9vbl1qdmibhiqwbgb9-socks-0.6.1' '/nix/store/x0dkbq8923xvw64x9448dv1vwk5j6qcz-tls-1.5.7' '/nix/store/wfaix33sxpzfaxmildmssc3986v59h5r-asn1-encoding-0.9.6' '/nix/store/w4cyg969bc0d70i9x4bkrbw9v934j69y-asn1-types-0.3.4' '/nix/store/2ib8xj7gchs35w55jaijmxpx6bb5sg3y-hourglass-0.2.12' '/nix/store/2ib8xj7gchs35w55jaijmxpx6bb5sg3y-hourglass-0.2.12' '/nix/store/q6si19a66pdis4spn27xrbwak3l45xip-x509-1.7.6' '/nix/store/8jgzyncm4py5kzassxzk6j5spcshcd3v-asn1-parse-0.9.5' '/nix/store/8p147jna4x49rrjyp7vl278arva5i3gp-pem-0.2.4' '/nix/store/nl4m3mvsmsxn1z2iabcqvdxr9h8h5gwp-x509-store-1.6.9' '/nix/store/5lpcysr8nyqnyag1llkn2p8r2ym6kdbz-x509-validation-1.6.12' '/nix/store/xij1qh8wxfywqv99ks95saz87im2g0vw-x509-system-1.6.7' '/nix/store/62rhrdiln553nax9vr2jy3zm92bwi917-infer-license-0.2.0' '/nix/store/plmmyjciz6ihpw4da5jpwilbdy9kqwlx-text-metrics-0.3.2' '/nix/store/6c773fxa0rw2qccdxsjl8lj1rn6pwjr8-monad-par-0.3.5' '/nix/store/1c1rch9hpskdflbfdwcd3s917in2k2cj-abstract-deque-0.3' '/nix/store/w730ghpx6j317iw7my02541wcscxfyxh-abstract-par-0.3.3' '/nix/store/xrdi91r70krgqn73228cmry8hy55h93d-monad-par-extras-0.3.3' '/nix/store/cil27jhfsl2vihnrycj8y98jim1wr5sc-mwc-random-0.15.0.2' '/nix/store/cjvzv2d6d83wlk5hwif6q9sl6sm7rj8k-math-functions-0.3.4.2' '/nix/store/gslcxcjlgx326qg3fzyh5qabzvjmilkj-cabal-fmt-0.1.6' )
declare -a pkgsTargetTarget=('/nix/store/8636r3d8rsk7c3l5xcgb1mn37pkfc84k-ncurses-6.3-p20220507' '/nix/store/v3j1blvixih1gd29l8j1mxaf3v26cn2w-libffi-3.4.2' '/nix/store/kxxxzpxww678wwbx78cq5in7gmdnmybq-gmp-with-cxx-6.2.1' )
declare -a postFixupHooks=('_multioutPropagateDev' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
prefix='/home/gareth/code/classy-postgresql/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
shell='/nix/store/iffl6dlplhv22i2xy7n1w51a5r631kmi-bash-5.1-p16/bin/bash'
export shell
shellHook=''
export shellHook
stdenv='/nix/store/w4yyp4pm2czqhr0078c0wwlx2dk2dzqw-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
        if [ -n "${NIX_LIB64_IN_SELF_RPATH:-}" ]; then
            export NIX_LDFLAGS="-rpath $1/lib64 ${NIX_LDFLAGS-}";
        fi;
        if [ -n "${NIX_LIB32_IN_SELF_RPATH:-}" ]; then
            export NIX_LDFLAGS="-rpath $1/lib32 ${NIX_LDFLAGS-}";
        fi;
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    for varName in $(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }');
    do
        if (( "${NIX_DEBUG:-0}" >= 1 )); then
            printf "@%s@ -> %q\n" "${varName}" "${!varName}";
        fi;
        args+=("--subst-var" "$varName");
    done
}
_assignFirst ()
{
 
    local varName="$1";
    local REMOVE=REMOVE;
    shift;
    while (( $# )); do
        if [ -n "${!1-}" ]; then
            eval "${varName}"="$1";
            return;
        fi;
        shift;
    done;
    echo "Error: _assignFirst found no valid variant!";
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    if [ -d "$fn" ]; then
        cp -pr --reflink=auto -- "$fn" "$(stripHash "$fn")";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                xz -d < "$fn" | tar xf - --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra stripCmds=(STRIP TARGET_STRIP);
    if [[ "${STRIP-}" == "${TARGET_STRIP-}" ]]; then
        dontStripTarget+=1;
    fi;
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null; then
            continue;
        fi;
        stripDebugList=${stripDebugList:-lib lib32 lib64 libexec bin sbin};
        if [ -n "$stripDebugList" ]; then
            stripDirs "$stripCmd" "$stripDebugList" "${stripDebugFlags:--S}";
        fi;
        stripAllList=${stripAllList:-};
        if [ -n "$stripAllList" ]; then
            stripDirs "$stripCmd" "$stripAllList" "${stripAllFlags:--s}";
        fi;
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ -n "${dontRewriteSymlinks-}" ]; then
        return 0;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    forceShare=${forceShare:=man doc info};
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in $forceShare;
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$outputs" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "$shareDocName" ]; then
        local confScript="$configureScript";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    configureFlags="        --bindir=${!outputBin}/bin --sbindir=${!outputBin}/sbin         --includedir=${!outputInclude}/include --oldincludedir=${!outputInclude}/include         --mandir=${!outputMan}/share/man --infodir=${!outputInfo}/share/info         --docdir=${!outputDoc}/share/doc/${shareDocName}         --libdir=${!outputLib}/lib --libexecdir=${!outputLib}/libexec         --localedir=${!outputLib}/share/locale         $configureFlags";
    installFlags="        pkgconfigdir=${!outputDev}/lib/pkgconfig         m4datadir=${!outputDev}/share/aclocal aclocaldir=${!outputDev}/share/aclocal         $installFlags"
}
_multioutDevs ()
{
 
    if [ "$outputs" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$outputs" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $outputs;
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit -1;
    if [ -f "$pkg" ]; then
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    header "checking for references to $TMPDIR/ in $dir...";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done < <(find "$dir" -type f -print0);
    stopNest
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    : ${makeFlags=};
    if [[ -z "$makeFlags" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES} -l${NIX_BUILD_CORES}} SHELL=$SHELL $makeFlags "${makeFlagsArray[@]}" $buildFlags "${buildFlagsArray[@]}");
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget=check;
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget=test;
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES} -l${NIX_BUILD_CORES}} SHELL=$SHELL $makeFlags "${makeFlagsArray[@]}" ${checkFlags:-VERBOSE=y} "${checkFlagsArray[@]}" ${checkTarget});
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
closeNest ()
{
 
    true
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : ${configureScript=};
    : ${configureFlags=};
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        configureFlags="${prefixKey:---prefix=}$prefix $configureFlags";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                configureFlags="--disable-dependency-tracking $configureFlags";
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                configureFlags="--disable-static $configureFlags";
            fi;
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local flagsArray=($configureFlags "${configureFlagsArray[@]}");
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' $1; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=($distFlags "${distFlagsArray[@]}" ${distTarget:-dist});
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars" || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            return 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit -1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'$search_path'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $outputs;
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $outputs;
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in $setupHooks;
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases:-}" ]; then
        phases="${prePhases:-} unpackPhase patchPhase ${preConfigurePhases:-}             configurePhase ${preBuildPhases:-} buildPhase checkPhase             ${preInstallPhases:-} installPhase ${preFixupPhases:-} fixupPhase installCheckPhase             ${preDistPhases:-} distPhase ${postPhases:-}";
    fi;
    for curPhase in $phases;
    do
        if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
            continue;
        fi;
        if [[ -n $NIX_LOG_FD ]]; then
            echo "@nix { \"action\": \"setPhase\", \"phase\": \"$curPhase\" }" 1>&$NIX_LOG_FD;
        fi;
        showPhaseHeader "$curPhase";
        dumpVars;
        local startTime=$(date +"%s");
        eval "${!curPhase:-$curPhase}";
        local endTime=$(date +"%s");
        showPhaseFooter "$curPhase" "$startTime" "$endTime";
        if [ "$curPhase" = unpackPhase ]; then
            [ -z "${sourceRoot}" ] || chmod +x "${sourceRoot}";
            cd "${sourceRoot:-.}";
        fi;
    done
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "binutils-wrapper-2.38: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "binutils-wrapper-2.38: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
header ()
{
 
    echo "$1"
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} ${installCheckTarget:-installcheck} > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES} -l${NIX_BUILD_CORES}} SHELL=$SHELL $makeFlags "${makeFlagsArray[@]}" $installCheckFlags "${installCheckFlagsArray[@]}" ${installCheckTarget:-installcheck});
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(SHELL=$SHELL $makeFlags "${makeFlagsArray[@]}" $installFlags "${installFlagsArray[@]}" ${installTargets:-install});
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $outputs;
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if rmdir "$srcParent"; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$(readlink -m "$srcParent/..")" 2> /dev/null || true;
            fi;
        done;
    done
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    header "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0);
    stopNest
}
patchPhase ()
{
 
    runHook prePatch;
    for i in ${patches:-};
    do
        header "applying patch $i" 3;
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        $uncompress < "$i" 2>&1 | patch ${patchFlags:--p1};
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    if [[ "$1" == "--host" ]]; then
        pathName=HOST_PATH;
        shift;
    else
        if [[ "$1" == "--build" ]]; then
            pathName=PATH;
            shift;
        fi;
    fi;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f";
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "$pathName" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                exit 1;
            fi;
            newPath="$(PATH="${!pathName}" command -v "$arg0" || true)";
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" command -v "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0);
    stopNest
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( $delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( $H > 0 )) && echo -n "$H hours ";
    (( $M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    case "$phase" in 
        unpackPhase)
            header "unpacking sources"
        ;;
        patchPhase)
            header "patching sources"
        ;;
        configurePhase)
            header "configuring"
        ;;
        buildPhase)
            header "building"
        ;;
        checkPhase)
            header "running tests"
        ;;
        installPhase)
            header "installing"
        ;;
        fixupPhase)
            header "post-installation fixup"
        ;;
        installCheckPhase)
            header "running install tests"
        ;;
        *)
            header "$phase"
        ;;
    esac
}
stopNest ()
{
 
    true
}
stripDirs ()
{
 
    local cmd="$1";
    local dirs="$2";
    local stripFlags="$3";
    local dirsNew=;
    local d;
    for d in ${dirs};
    do
        if [ -d "$prefix/$d" ]; then
            dirsNew="${dirsNew} $prefix/$d ";
        fi;
    done;
    dirs=${dirsNew};
    if [ -n "${dirs}" ]; then
        header "stripping (with command $cmd and flags $stripFlags) in$dirs";
        find $dirs -type f -exec $cmd $stripFlags '{}' \; 2> /dev/null;
        stopNest;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local fileName="$1";
    shift;
    substitute "$fileName" "$fileName" "$@"
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        case "$1" in 
            --replace)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        echo "substituteStream(): WARNING: pattern '$pattern' doesn't match anything in $description" 1>&2;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream(): ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream(): ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream(): ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    header "unpacking source archive $curSrc" 3;
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in $srcs;
    do
        unpackFile "$i";
    done;
    : ${sourceRoot=};
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0'                     | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH:$nix_saved_PATH"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
